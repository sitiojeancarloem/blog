#!/bin/bash
set -e  # interrompe em caso de erro

SOURCE_BRANCH=$(git rev-parse --abbrev-ref HEAD)
TARGET_BRANCH="live"

echo "üöÄ Publicando altera√ß√µes de '$SOURCE_BRANCH' ‚Üí '$TARGET_BRANCH'..."

# Garante que n√£o estamos no pr√≥prio branch live
if [ "$SOURCE_BRANCH" = "$TARGET_BRANCH" ]; then
  echo "‚ùå Voc√™ j√° est√° no branch '$TARGET_BRANCH'. Cancele para evitar merge incorreto."
  exit 1
fi

# Garante que reposit√≥rio est√° limpo
if [ -n "$(git status --porcelain)" ]; then
  echo "‚ö†Ô∏è  Existem mudan√ßas n√£o commitadas. Fa√ßa commit ou stash antes de publicar."
  exit 1
fi

# Atualiza reposit√≥rio local
git fetch origin

# Garante que o branch live existe
if git show-ref --quiet refs/heads/$TARGET_BRANCH; then
  echo "‚úÖ Branch '$TARGET_BRANCH' existe localmente."
else
  if git show-ref --quiet refs/remotes/origin/$TARGET_BRANCH; then
    echo "‚¨áÔ∏è  Criando branch local a partir de origin/$TARGET_BRANCH..."
    git checkout -b $TARGET_BRANCH origin/$TARGET_BRANCH
  else
    echo "‚öôÔ∏è  Criando novo branch '$TARGET_BRANCH' (n√£o existe remoto ainda)..."
    git checkout -b $TARGET_BRANCH
  fi
fi

# Garante que temos a √∫ltima vers√£o do live
git checkout $TARGET_BRANCH
git pull origin $TARGET_BRANCH || true

# Faz merge do branch de origem
git merge --no-ff "$SOURCE_BRANCH" -m "üöÄ Publica√ß√£o autom√°tica de '$SOURCE_BRANCH' ‚Üí '$TARGET_BRANCH' em $(date +'%Y-%m-%d %H:%M:%S')"

# Envia para o remoto (aciona o Actions)
git push origin $TARGET_BRANCH

# Retorna para o branch original
git checkout "$SOURCE_BRANCH"

echo "‚úÖ Publica√ß√£o conclu√≠da com sucesso!"
echo "   O GitHub Actions ser√° acionado para build e deploy."
